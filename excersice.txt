# Lý thuyết:
## Numbers, Operators and Expressions:
- What’s the difference between an Integer and a Float? 
   An integer (more commonly called an int) is a number without a decimal point. A float is a floating-point number, which means it is a number that has a decimal place. Floats are used when more precision is needed.
   Example: 
            a = 1
            b = 1.0

- Why should you be careful when converting back and forth between integers and floats?
- What’s the difference between =, ==, and ===?
   = used to assign values. a = 1 , b = a => b = 1
   == used to compare 2 value. 1 == 1 => true , 2 == 1 => false
   === 

- How do you do exponents in Ruby?
  Use ** for exponents
  Example:
            10**2 => 100

- What is a range?
  A Range represents an interval—a set of values with a beginning and an end. 
  Example:
            1..5
            1...3

- How do you create a range?
            Use (1..5) or Range.new(1,5)

- What’s the difference between (1..3) and (1...3)?
            (1..3)  => 1,2,3
            (1...3) => 1,2

- What are three ways to create a range?
            -(1..3)
            -(1...3)
            -Range.new(1,3)
## Strings:
- What’s the difference between single and double quotes?
              name = "Quy"
              'Your name is #{name}' => Your name is #{name}
              "Your name is #{name}" => Your name is Quy

- What is string interpolation?
  Glueing strings together like this works, and you can do it. However, there is another method of accomplishing the same, and it is widely used, and usually preferred over concatenating strings with +
  Example:
            name = "Quy"
            puts "Hello, #{name}"
- What are escape characters?
- What are line breaks?
- How do you make other things into strings?
- How do you concatenate strings?
- How do you access a specific character or substring?
- How do you split up strings into arrays?
- How are strings and arrays similar?
- How do you get and clean up user input on the command line?
- What does it mean that strings are “mutable” and why care?
- What is a symbol?
- How is a symbol different from a string?
- What is a Regular Expression (RegEx)?
- How can you center or right-justify a string?
## Arrays:
- What are three ways to create an array?
- How do you prepopulate the array with default data?
- How do you access items in an array?
- How can you access a specific group of items in an array?
- How do you modify the items in an array?
- How do you combine arrays?
- How do you find the values in one array that aren’t in another?
- How do you find values in both arrays?
- What is the difference between push/pop and shift/unshift?
- What is the shovel operator?
- How is > arr.pop different from > arr[-1]?
- How is pushing or <<ing another array into your array different from just adding them together?
- How do you delete items in an array?
- Why should you be careful deleting items in an array?
- How can you convert arrays to strings?
- How can you convert from other data types to arrays?
- How can you figure out if an array contains a particular value?
- How do you find the biggest item in an array?
- How do you find the smallest item in an array?
- How do you remove any duplicates from your array?
- How do you find out how big an array is?
- How do you put an array in order?
- What are the naming conventions for arrays?
- What should you store in arrays?
## Hashes
- What is a hash?
- What are keys and values?
- How is a hash similar to an Array?
- How is a hash different from an Array?
- What are 3 ways to create a hash?
- What is the hash rocket?
- How do you access data in a hash?
- How do you change data in a hash?
- What types of data are good to store in a hash?
- What are options hashes?
- How do you delete data from a hash?
- How do you add hashes together?
- How do you list out all the keys or values?
- How do you see if the hash contains a key or value?
- What is a set?
## Other Random Stuff:
- What is nil?
- How do you check if something is nil?
- What’s the difference between nil and blank and empty?
- Are the following nil or empty? * " ", "", [], [""], {}
- What’s the difference between puts and p and print?
- What does inspect do?
- What do +=, -=, * = and /= do?
- What is parallel assignment?
- What’s the easiest way to swap two variables?
## Conditionals and Flow Control:
- What is a “boolean”?
- What are “truthy” values?
- Are nil, 0, "0", "", 1, [], {} and -1 considered true or false?
- When do you use elsif?
- When do you use unless?
- What does <=> do?
- Why might you define your own <=> method?
- What do || and && and ! do?
- What is returned by puts("woah") || true?
- What is ||=?
- What is the ternary operator?
- When should you use a case statement?
## Iteration:
- What does loop do?
- What are the two ways to denote a block of code?
- What is an index variable?
- How do you print out each item of a simple array [1,3,5,7] with:
  - loop?
  - while?
  - for?
  - #each?
  - #times?
- What’s the difference between while and until?
- How do you stop a loop?
- How do you skip to the next iteration of a loop?
- How would you start the loop over again?
- What are the (basic) differences between situations when you would use while vs #times vs #each?
- What does nesting loops mean and when would you use it?
## Blocks, Procs, and Lambdas:
- How is a block like a function?
- How is a block different from a function?
- What are the two ways to declare a block?
- How do you return data from a block?
- What happens if you include a return statement in a block?
- Why would you use a block instead of just creating a method?
- What does yield do?
- How do you pass arguments to a block from within a method?
- How do you check whether a block was actually passed in?
- What is a proc?
- What’s the difference between a proc and a block?
- When would you use a proc instead of a block?
- What is a closure?
- What is a lambda?
- What’s different between a lambda and a proc?
- What is a Method (capital “M”)?
- What do Methods basically allow you to do that could probably be pretty interesting when you’re writing some more advanced programs later on?
# Practice:
## Palindromes (strings)
- Given a sentence, return true if the sentence is a palindrome.
- Note: Ignore whitespace and cases of characters.
- Example: Given "Never odd or even" the method should return true

## Compute sum of cubes for given range
- Problem Statement
  - Compute the sum of cubes for a given range a through b.
  - Write a method called sum_of_cubes to accomplish this task
- Example Given range 1 to 3 the method should return 36

## Find non-duplicate values in an Array
- Problem Statement: Given an Array, return the elements that are present exactly once in the array.
- Example: Given [1,2,2,3,3,4,5], the method should return [1,4,5]

## Check if all elements in an array are Fixnum
- Problem Statement: Given an array, return true if all the elements are Fixnums.
- Example: Given [1,2,3], the method should return true

## Kaprekar's Number
- Problem Statement
```
9 is a Kaprekar number since
9 ^ 2 = 81 and 8 + 1 = 9

297 is also Kaprekar number since
297 ^ 2 = 88209 and 88 + 209 = 297.
```
- In short, for a Kaprekar number k with n-digits, if you square it and add the right n digits to the left n or n-1 digits, the resultant sum is k.
- Find if a given number is a Kaprekar number.

## Number shuffle
- Problem Statement: Given a 3 or 4 digit number with distinct digits, return a sorted array of all the unique numbers that can be formed with those digits
- Example:  Given: 123. Return: [123, 132, 213, 231, 312, 321]

# Small Project
## Project 1: Caesar Cipher
### What is it?
```
In cryptography, a Caesar cipher, also known as Caesar’s cipher, the shift cipher, Caesar’s code or Caesar shift, is one of the simplest and most widely known encryption techniques. It is a type of substitution cipher in which each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, D would be replaced by A, E would become B, and so on. The method is named after Julius Caesar, who used it in his private correspondence.
```
### Duty:
- Implement a caesar cipher that takes in a string and the shift factor and then outputs the modified string:
### Input/Output
```
caesar_cipher("What a string!", 5)
  => "Bmfy f xywnsl!"
```
## Project 2: Stock Picker
### Duty:
- Implement a method #stock_picker that takes in an array of stock prices, one for each hypothetical day. It should return a pair of days representing the best day to buy and the best day to sell. Days start at 0.
### Input/Output
```
stock_picker([17,3,6,9,15,8,6,1,10])
  => [1,4]  # for a profit of $15 - $3 == $12
```

## Project 3: Substrings
### Duty
- Implement a method #substrings that takes a word as the first argument and then an array of valid substrings (your dictionary) as the second argument. It should return a hash listing each substring (case insensitive) that was found in the original string and how many times it was found.
### Input/Output
```
> dictionary = ["below","down","go","going","horn","how","howdy","it","i","low","own","part","partner","sit"]
  => ["below","down","go","going","horn","how","howdy","it","i","low","own","part","partner","sit"]
  > substrings("below", dictionary)
  => { "below" => 1, "low" => 1 }
```
- Make sure your method can handle multple words
```
> substrings("Howdy partner, sit down! How's it going?", dictionary)
  => { "down" => 1, "how" => 2, "howdy" => 1,"go" => 1, "going" => 1, "it" => 2, "i" => 3, "own" => 1,"part" => 1,"partner" => 1,"sit" => 1 }
```
